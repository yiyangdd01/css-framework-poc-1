dist: xenial
os: linux
language: shell

# notifications:
#   slack:
#     rooms:
#       secure:
#     on_success: change
#     on_failure: always
#     on_pull_requests: false

stages:
  - name: 'Test, Build and Deploy'
    if: branch =~ ^master$|^development$|^release

jobs:
  fast_finish: true
  allow_failures:
    - name: Cypress Test
  include:
    - stage: 'Test, Build and Deploy'
      name: 'Lint, Unit Test, Build and Deploy'
      if: branch =~ ^master$|^development$|^release
      before_install: |-
        if [ "master" == "${TRAVIS_BRANCH}" ]; then
          for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
            eval export ${env_value%_PRODUCTION}="${!env_value}"
          done
          ENVIRONMENT="production"
        elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
          for env_value in $(compgen -v |grep '.*_STAGING$'); do
            eval export ${env_value%_STAGING}="${!env_value}"
          done
          ENVIRONMENT="staging"
        else
          for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
            eval export ${env_value%_DEVELOPMENT}="${!env_value}"
          done
          ENVIRONMENT="development"
        fi
      install: |-
        # install awscli v2 for ecr upload
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
      script: |-
        set -e
        export IMAGE="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_NAME}:${TRAVIS_BUILD_NUMBER}"
        export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_NAME}:latest"
        cp ".env.${ENVIRONMENT}" .env
        # build test image to run test
        docker build -t test \
          --target installer \
          --build-arg "NPM_TOKEN=$NPM_TOKEN" \
          .
        docker run --rm \
          -v "$PWD/coverage:/srv/coverage" \
          test bash -c "
          yarn install --ignore-engines --frozen-lockfile &&
          yarn test --coverage --no-watch"
        # upload coverage report to codecov
        # bash <(curl -s https://codecov.io/bash) -t "${CODECOV_TOKEN}"
        # build the final image
        docker build -t "$IMAGE" -t "$IMAGE_LATEST" \
          --build-arg "NPM_TOKEN=$NPM_TOKEN" \
          .
        # cp static for s3
        docker run --rm \
          -v "$PWD/s3_upload:/s3_upload" \
          --entrypoint "" \
          "$IMAGE" \
          bash -c "cp -R /srv/.next /s3_upload/_next"
        # remove source map in s3 if production
        if [ "production" == "${ENVIRONMENT}" ]; then
          find "$PWD/s3_upload" -name '*.js.map' -exec rm -f {} \;
        fi
      # deploy:
        # ### upload static to s3, ecr may reference to s3 file
        # - provider: s3
        #   access_key_id: $AWS_S3_ACCESS_KEY_ID
        #   secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        #   bucket: $AWS_S3_BUCKET
        #   region: $AWS_REGION
        #   local_dir: s3_upload
        #   cleanup: false
        #   on:
        #     all_branches: true

        # ### upload to ecr
        # - provider: script
        #   script: >-
        #     AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID
        #     AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY
        #     aws ecr get-login-password | docker login --username AWS --password-stdin
        #     ${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
        #     && docker push "$IMAGE"
        #     && docker push "$IMAGE_LATEST"
        #   cleanup: false
        #   on:
        #     all_branches: true
