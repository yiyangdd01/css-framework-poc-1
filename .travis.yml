jobs:
  include:
    - stage: development
      language: python
      group: stable
      dist: trusty
      os: linux
      services:
        - docker
      cache: pip

      # notifications:
      #   slack:
      #     rooms:
      #       secure:
      #     on_success: change
      #     on_failure: always
      #     on_pull_requests: false

      before_install: |-
        if [ "master" == "${TRAVIS_BRANCH}" ]; then
          for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
            eval export ${env_value%_PRODUCTION}="${!env_value}"
          done
          ENVIRONMENT="production"
        elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
          for env_value in $(compgen -v |grep '.*_STAGING$'); do
            eval export ${env_value%_STAGING}="${!env_value}"
          done
          ENVIRONMENT="staging"
        else
          for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
            eval export ${env_value%_DEVELOPMENT}="${!env_value}"
          done
          ENVIRONMENT="development"
        fi
      install: |-
        # install awscli for ecr upload
        pip install awscli --upgrade
      script: |-
        set -e
        tag_build_num="v${TRAVIS_BUILD_NUMBER}-build"
        aws_registry_id="${AWS_REGISTRY_ID}"
        aws_region="${AWS_REGION}"
        aws_ecr_name="${AWS_ECR_NAME}"
        export IMAGE="${aws_registry_id}.dkr.ecr.${aws_region}.amazonaws.com/${aws_ecr_name}:${tag_build_num}"
        export IMAGE_LATEST="${aws_registry_id}.dkr.ecr.${aws_region}.amazonaws.com/${aws_ecr_name}:latest"
        export ECR_LOGIN="aws ecr get-login --registry-ids ${aws_registry_id} --region ${aws_region} --no-include-email"
        # NAME="$aws_ecr_name"
        cp ".env.${ENVIRONMENT}" .env
        # build test image to run test
        docker build -t test \
          --target installer \
          --build-arg "NPM_TOKEN=$NPM_TOKEN" \
          .
        docker run --rm \
          -v "$PWD/coverage:/srv/coverage" \
          test bash -c "
          yarn install --ignore-engines --frozen-lockfile &&
          yarn test --coverage --no-watch"
        # upload coverage report to codecov
        # bash <(curl -s https://codecov.io/bash) -t "${CODECOV_TOKEN}"
        # build the final image
        docker build -t "$IMAGE" -t "$IMAGE_LATEST" \
          --build-arg "NPM_TOKEN=$NPM_TOKEN" \
          .
        # cp static for s3
        docker run --rm \
          -v "$PWD/s3_upload:/s3_upload" \
          --entrypoint "" \
          "$IMAGE" \
          bash -c "cp -R /srv/.next /s3_upload/_next"
        # remove source map in s3 if production
        if [ "production" == "${ENVIRONMENT}" ]; then
          find "$PWD/s3_upload" -name '*.js.map' -exec rm -f {} \;
        fi
      # deploy:
        # ### upload static to s3, ecr may reference to s3 file
        # - provider: s3
        #   access_key_id: $AWS_S3_ACCESS_KEY_ID
        #   secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        #   bucket: $AWS_S3_BUCKET
        #   region: $AWS_REGION
        #   local_dir: s3_upload
        #   skip_cleanup: true
        #   on:
        #     all_branches: true

        # ### upload to ecr
        # - provider: script
        #   script: >-
        #     $(AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY $ECR_LOGIN)
        #     && docker push "$IMAGE"
        #     && docker push "$IMAGE_LATEST"
        #   skip_cleanup: true
        #   on:
        #     all_branches: true
      if: branch =~ ^master$|^development$|^release
