if: branch =~ ^master$|^development$|^release
language: python
group: stable
dist: trusty
os: linux
services:
- docker
cache: pip

# notifications:
#   slack:
#     rooms:
#       secure:
#     on_success: change
#     on_failure: always
#     on_pull_requests: false

before_install: |-
  if [ "master" == "${TRAVIS_BRANCH}" ]; then
    for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
      eval export ${env_value%_PRODUCTION}="${!env_value}"
    done
    ENVIRONMENT="production"
  elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
    for env_value in $(compgen -v |grep '.*_STAGING$'); do
      eval export ${env_value%_STAGING}="${!env_value}"
    done
    ENVIRONMENT="staging"
  else
    for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
      eval export ${env_value%_DEVELOPMENT}="${!env_value}"
    done
    ENVIRONMENT="development"
  fi
install: |-
  # install awscli for ecr upload
  pip install awscli --upgrade
script: |-
  set -e
  tag_build_num="v${TRAVIS_BUILD_NUMBER}-build"
  export IMAGE="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:$tag_build_num"
  export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:latest"
  export ECR_LOGIN="aws ecr get-login --registry-ids $AWS_REGISTRY_ID --region $AWS_REGION --no-include-email"
  NAME=$AWS_ECR_NAME

  cp .env.${ENVIRONMENT} .env

  # build test image to run test
  docker build -t test \
    --target installer \
    --build-arg NPM_TOKEN=$NPM_TOKEN \
    .
  docker run --rm \
    -v $PWD/coverage:/srv/coverage \
    test bash -c "
    yarn &&
    yarn tsc &&
    yarn test --coverage --no-watch &&
    yarn eslint --quiet"
  # upload coverage report to codecov
  # bash <(curl -s https://codecov.io/bash) -t "${CODECOV_TOKEN}"

  # build the final image
  docker build -t "$IMAGE" -t $IMAGE_LATEST \
    --build-arg NPM_TOKEN=$NPM_TOKEN \
    .
  # cp static for s3
  docker run --rm \
    -v $PWD/s3_upload:/s3_upload \
    --entrypoint "" \
    $IMAGE \
    bash -c "cp -R /srv/.next /s3_upload/_next"

deploy: []
# ### upload static to s3, ecr may reference to s3 file
# - provider: s3
#   access_key_id: $AWS_S3_ACCESS_KEY_ID
#   secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
#   bucket: $AWS_S3_BUCKET
#   region: $AWS_REGION
#   local_dir: s3_upload
#   skip_cleanup: true
#   on:
#     all_branches: true

# ### upload to ecr
# - provider: script
#   script:  >-
#     $(AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY $ECR_LOGIN)
#     && docker push "$IMAGE"
#     && docker push "$IMAGE_LATEST"
#   skip_cleanup: true
#   on:
#     all_branches: true
